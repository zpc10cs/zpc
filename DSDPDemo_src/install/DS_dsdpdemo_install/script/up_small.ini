################################################################################
#说明：
#    “网元”：物理上的一台机器即一个网元
#    “组件”：单独归档的最小功能单位，即“规格”中的“组件”，如jdk,jboss,bme等
#    “组件包”：“组件”的集合，是不可分开部署的最小功能单位，如MDMC（包含jdk,jboss,
#bme,cmp,pmp,cms,pms,mdmccommon）
#    三者关系：“网元”包含多个“组件包”，“组件包”包含多个“组件”
################################################################################
[NE-COMPONENT-REF]
#网元与组件包对应关系，来源于ne_type.xml
#网元列表来源于net_structure.xml中的iptvall_small组网
#格式:<网元名称>=<组件包1>,<组件包2>...<组件包n>
#组网名称：dsdp_small--DSDP全业务小型组网
UPM=upm_teastore,upm
SNS=sns_teastore,sns
MQ=mq
CONTENT=content_db,content
SUBSCRIPTION=sub_db,subscribe
ORDER=ord_db,order
CHARGING=charging_db,charging
PRODUCT=product_db,product
publicinfo=publicinfo_db,publicinfo_teastore,publicinfo
CGW=cgw_db,cgw
PAYMENT=bme_db,bme,payment_db,payment
LOGAgent=flume,j2se
PLMF=plmf
COMMON=j2se,uniAgent,micro-container
CAMPAIGN=cmp_db,campaign
TAG=tag_teastore,tag
MARKETINGMGMT=marketingmgmt
DSDPDEMO=dsdpdemo

#[COMPONENT-REF]
#组件包与组件对应关系，为解决组件依赖性和组件安装顺序，同时解决同一组件在一个网
#元上安装多份的问题，如BME1.2。
#格式:<组件包名称>=<组件1>,<组件2>...
#安装组件包后的组件时，需要到[SUB-COMPONENT-PREFIX]查找此组件是否需要前缀，有前缀
#则传入，没有则传空值。
#sis中增加sisWeb组件，修改时间：20110915
#sis中去掉sisWeb组件，修改时间：20120110
#mdmc=jdk,jboss,bme,pmp,cmp,partner,cms,mdmccommon,pms,bfm_sdp,sis_client_bfm,sms,sso,ddr,ddr_client,csm,common_component,at
#bfm=jboss,bme,pmp,cmp,mdmccommon,cmp_event_server,cmp_event_client,cmscommon,chain,provision,cms_custom,common_component,bfm_sdp,bfm_customize,provision_customize
#mdmc_jm=jdk,javamonitor
#zk=zk
#upm=upm
#mq=mq
#sns=sns
#redis=redis
#content=content
#sub=sub
#order=order
#chg=chg
#product=product
#ps=ps
#cgw=cgw
#payment=pmt
#logagent=logagent
#logserver=logserver
#campaign=campaign

[COMPONENT-PKG-REF]
#组件与归档包关系，用于环境检查时包校验及安装时解包。
#格式:<组件名>=<归档包1>,<归档包2>...
#归档包必须为tar.gz格式(?待确认)
#一个组件可以有多个归档包;归档包支持unix正则表达式(从ne_type.xml中配置的包的正则
#表达式直接取过来,在{}前加\\即可#)
#增加sisWeb包，修改时间：20110915
#删除sisWeb包，修改时间：20120110
jdk6=java1.6_64x_suse.tgz
j2se=java1.7_64x_suse.tar.gz
bme=BME_Kernel.*V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.[gx]z
bme_db=bmeDB.*\.tar\.[gx]z
upm=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_UPM_PLATFORM\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_UPM_APP\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SO_PLATFORM\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_UPM_DB\.tar\.gz
mq=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_MQ_APP\.tar\.gz
sns=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SNS_PLATFORM\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SNS_APP\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SO_PLATFORM\.tar\.gz,USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SNS_DB\.tar\.gz
javamonitor=monitor.tar.gz
uniAgent=dAgent_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
content=CONTENT_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
subscribe=SUBSCRIBE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
order=ORDER_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
charging=CHARGING_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
product=PRODUCT_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
publicinfo=PUBLICINFO_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
cgw=Service_Control_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_CGW\.tar\.[gx]z
payment=Service_Control_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_PAYMENT\.tar\.[gx]z
flume=ONIP_OceanInsight_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar.gz,LOGAGENT_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_dist\.tar.gz
logserver=elasticsearch-[0-9].[0-9].[0-9].tar.gz,LOGSERVER_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_dist.tar.gz
campaign=CAMPAIGN_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
plmf=PLMF_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
payment_db=paymentDB.*\.tar\.[gx]z
platform_db=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_PLATFORM_DB.tar.gz
content_db=CONTENTDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
sub_db=SUBSCRIBEDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
charging_db=CHARGINGDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
ord_db=ORDERDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
product_db=PRODUCTDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
cgw_db=CGWDB.*\.tar\.[gx]z
publicinfo_db=PUBLICINFODB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
upm_teastore=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_UPM_TEASTORE.tar.gz
sns_teastore=USERPROFILE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*_SNS_TEASTORE.tar.gz
publicinfo_teastore=PUBLICINFOTEASTORE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
cmp_db=CAMPAIGNDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
tag=TAG_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
tag_teastore=TAGTEASTORE_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
micro-container=commons.micro-container_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
marketingmgmt=MARKETINGMGMT_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
marketingmgmt_db=MARKETINGMGMTDB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
dsdpdemo_db=DSDPDEMODB_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz
dsdpdemo=DSDPDEMO_V[0-9]\{3\}R[0-9]\{3\}C[0-9]\{2\}.*\.tar\.gz

[COMPONENT-ORA-REF]
#该配置参数用于在环境检查时，针对依赖于Oracle客户端的组件进行数据库客户端到服务
#端的连通性检查。
#该参数配置格式如下：
#	usedb=<使用Oracle C++客户端的组件ID>;
#<使用Oracle C++客户端的组件ID>指配置Oracle客户端参数xxx_oracle_home/xxx_oracle_net_service_name
#的组件ID。
#
#针对客户端的连通性检查，要求用户输入网络服务名，（连接到服务端的该网络服务名已经
#在当前网元的Oracle客户端的tnsnames.ora中配置，在连通性检查时将不再检查该配置相关
#参数是否正确），脚本将直接使用用户输入的net_service_name，用tnsping命令验证和服
#务端的连通性。

[PORT-COMPONENT-REF]
#解析监听端口与组件包的关联程度
#格式：组件包名=监听端口key1[type|action]{,[监听端口keyn[type|action]]}
#type有3种取值，不同的type取值，action不同
#
#type=0 校验连续偏移端口 action=offset_start_port,+offset|-offset,num(offset基于监听端口key+begin_base_port的偏移量，num连续偏移次数)
#componentA=port1[0|0:+1:10],port2[0|0:-2:5],port3[0|+100:+5:10]
#检测组件包componentA的关联端口port1、port2和port3，并且检查port1的连续10个端口不被占用（每次递增1）；和port2的连续5个端口不被占用（每次递减2）
#port3的基准端口从port3+100开始（包含port3+100），连续10个端口不被占用（每次递增5）

#type=1 校验独立偏移端口 action=+offset|-offset{,[+offset|-offset]}
#componentA=port1[1|+2:+4:+6:-5]
#检测组件包componentA的关联端口port1，并且检查port1的相关偏移端口+2,+4,+6,-5不被占用（所有偏移全部基于port1）
#
#type=2 校验混合类型（即包含上述两种类型） action=start_offset_port,+offset|-offset,num;+offset|-offset{;...}
#componentA=port1[2|0:+1:10;+51:+61:+71]
#检测组件包componentA的关联端口port1，并且检查port1连续10个偏移端口（每次偏移+1）、基于port1的+51/+61/+71端口也不被占用
#需要注意的是，第一个域必须是连续端口的检查项
#lcap=lcap_port[1|+1:+2:+3:+4:+5:+6:+7:+8:+14:+18:+20:+30:+34:+38:+43:+51:+56],lcap_uoa_port[2|0:+1:8;+21:+25:+30:+39:+40],tomcat_hdm_http_port[1|+1]
UPM=up_service_port
SNS=sns_service_port
MQ=mq_service_port
ZooKeeper=zookeeper_service_port
REDIS=redis_service_port
CONTENT=content_service_port
SUBSCRIPTION=subscription_service_port
ORDER=order_service_port
CHARGING=charging_service_port
PRODUCT=product_service_port
publicinfo=publicinfo_service_port
CGW=cgw_service_port
PAYMENT=payment_service_port
LOGServer=logserver_tcp_port,logserver_tcp_port
PLMF=plmf_service_port
LOGAgent=
CAMPAIGN=campaign_service_port
TAG=tag_service_port
MARKETINGMGMT=service_port
DSDPDEMO=dsdpdemo_service_port

[PORT-SPECIAL-CHECK-REF]
#在相同的组网类型下，可能存在[PORT-COMPONENT-REF]中指定的待检查端口根据双机类型不同，端口检查不同的情况，
#例如单机需要检查指定端口、而双机不进行检查的情况，或双机需要检查而单机不检查的情况，所以特增加该segment进行标识，
#该segment表示如果[PORT-COMPONENT-REF]中存在需要检查的端口、还需要检查[PORT-SPECIAL-CHECK-REF]段中是否有特殊处理的端口说明，如果没有则全部检查，如果有
#则需要根据[PORT-SPECIAL-CHECK-REF]的配置进行处理
#该字段是一个整形参数，1仅单机检查、2仅双机检查
#例如mdmc=mdmc_jboss_http_port|1,mdmc_jboss_https_port|2，mdmc_jboss_http_port仅在单机情况下检查该端口，mdmc_jboss_https_port仅在双机情况下检查
#mdmc=mdmc_jboss_http_port|2，仅在双机情况下检查该端口


################################################################################
#说明：
#    下面的两个段只是针对IP分发的信息
#    修改此文件的时候请注意是不是必须修改下面两段的内容
################################################################################
[IP-DISTRIBUTE-ONE2ONE]
#将某组件A的IP地址分发给需要知道A IP的组件B，且组件A的IP有且只有一个
#如果某组件A部署多份,格式为:组件包名_A=B,组件包名查看[NE-COMPONENT-REF]段配置
#msgtraceserver=mdcc,ppsadapter,enableradapter,subscriberqueryadapter,cbe,sis


[IP-DISTRIBUTE-ONE2MORE]
#将某组件A的IP地址分发给需要知道A IP的组件B，且组件A的IP有多个

[Component_Container_Relation]
DSDPDEMO=dsdpdemo_container


